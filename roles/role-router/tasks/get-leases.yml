---
- set_fact:
    stored_group_leases: []
    group_leases: []
    dhcp_hosts: []

- name: leases directory
  file:
    path: "{{ lease_dir }}/{{ group }}"
    state: directory

- find:
    paths: "{{ lease_dir }}/{{ group }}"
  register: lease_files

- slurp:
    src: "{{ item.path }}"
  loop: "{{ lease_files.files }}"
  register: lease_slurps

- name: List of 'host,mac' items desired based on inventory group
  set_fact:
    dhcp_hosts: "{{ dhcp_hosts + [item + ',' + hostvars[item].mac] }}"
  loop: "{{ groups[group] }}"
  when:
    - groups[group] is defined
    - hostvars[item].local_ssh_access | default(false) | bool is false

- name: Read stored leases list with map of 'host,mac' names and the lease IP value
  set_fact:
    stored_group_leases: "{{ stored_group_leases + [{'name': item.item.path | basename(), 'value': item.content | b64decode }] }}"
  loop: "{{ lease_slurps.results  }}"

- name: Import eIP list with map of 'host,mac' names and the lease IP value
  set_fact:
    group_leases: "{{ group_leases + [{'name': item + ',' + hostvars[item].mac, 'value': hostvars[item].eip }] }}"
  loop: "{{ groups[group] }}"
  when:
    - groups[group] is defined
    - hostvars[item].eip != ''

- name: Import leases desired from stored leases
  set_fact:
    group_leases: "{{ group_leases + [item] }}"
  loop: "{{ stored_group_leases }}"
  when:
    - item.name is in dhcp_hosts
    - item is not in group_leases

- set_fact:
    dhcp_pool: "{{ query('sequence', dhcp_range) }}"
  vars:
    start: "{{ ip_start }}"
    end: "{{ ip_end }}"
    dhcp_range: "start={{ start }} end={{ end }}"

- set_fact:
    dhcp_pool_free: "{{ dhcp_pool | difference(group_leases | map(attribute='value')) }}"

- name: Add leases from free pool for hosts not already in leases
  set_fact:
    group_leases: "{{ group_leases + [{'name': item, 'value': dhcp_pool_free[idx] }] }}"
  loop: "{{ dhcp_hosts | difference(group_leases | map(attribute='name')) }}"
  loop_control:
    index_var: idx

- name: Delete lease files not in desired list
  file:
    path: "{{ lease_dir }}/{{ group }}/{{ item.name }}"
    state: absent
  loop: "{{ stored_group_leases }}"
  when: item.name is not in dhcp_hosts

- name: Write lease files
  copy:
    dest: "{{ lease_dir }}/{{ group }}/{{ item.name }}"
    content: "{{ item.value }}"
  loop: "{{ group_leases }}"

- name: Store group leases fact
  set_fact:
    leases: "{{leases | combine({group: group_leases})}}"
