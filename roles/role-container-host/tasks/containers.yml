
- name: Pull image
  containers.podman.podman_image:
    name: "{{ ctr.value.image }}"
    force: yes
  with_dict: "{{ ctr_dict }}"
  loop_control:
    loop_var: ctr
  register: image_state
  when: ctr.value.state == "present"

- name: Save container restart
  set_fact:
    containers_restart: "{{ containers_restart + [item.ctr.key] }}"
  with_items: "{{ image_state.results }}"
  when: item.changed

- name: Container with systemd service
  containers.podman.podman_container:
    name: "{{ item.value.name }}"
    image: "{{ item.value.image }}"
    state: "{{ item.value.state }}"
    recreate: no
    ipc: shareable
#    ports: "{{ ports_list[item.value.name] if ports_list[item.value.name] is defined else omit }}"
    ports: "{{ item.value.ports if item.value.ports is defined else omit }}"
    env: "{{ item.value.environment | default(defaults.env) }}"
    volume: "{{ volumes_list[item.value.name] if volumes_list[item.value.name] is defined else omit }}"
    mount: "{{ item.value.mount if item.value.mount is defined else omit }}"
    command: "{{ item.value.command if item.value.command is defined else omit }}"
    network: "{{ item.value.network | default('bridge') }}"
    pid: "{{ item.value.pid | default('private') }}"
    user: "{{ item.value.user if item.value.user is defined else omit }}"
    generate_systemd:
      new: no
      path: /etc/systemd/system/
      restart_policy: always
      time: 120
      names: true
  with_dict: "{{ ctr_dict }}"
  register: ctr_state

- name: Dont restart changed container
  set_fact:
    containers_restart: "{{ containers_restart | unique | difference([item.container.Name]) }}"
  with_items: "{{ ctr_state.results }}"
  when: item.changed

- name: Container service states
  set_fact:
    service_start: "{{ service_start | combine({item: (item in containers_restart) | ternary('restarted', 'started') }) }}"
  with_items: "{{ ctr_dict.keys() }}"

- name: Service
  systemd:
    name: "container-{{ item.value.name }}"
    state: "{{ (item.value.state == 'present') | ternary(service_start[item.value.name], 'stopped') }}"
    enabled: "{{ (item.value.state == 'present') | ternary('yes', 'no') }}"
    daemon_reload: "yes"
  with_dict: "{{ ctr_dict }}"

- file:
    path: /etc/systemd/system/container-{{ item.value.name }}.service
    state: absent
  with_dict: "{{ ctr_dict }}"
  when:
    - item.value.state == "absent"
  notify: systemd reload
