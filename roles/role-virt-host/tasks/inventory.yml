- name: List VMs
  virt:
    command: list_vms
  register: registered_vms

- name: List running VMs
  virt:
    command: list_vms
    state: running
  register: running_vms

- name: List of VMs designated for host
  set_fact:
    host_vms: "{{ host_vms + [item] }}"
  with_items: "{{ vms }}"
  when:
    - item.host == inventory_hostname

- name: Load VM inventory
  set_fact:
    vm_inventory: "{{ vm_inventory | combine({vm.name: { 'spec': vm, 'key': (vm.name | replace('-', '_'))} }) }}"
  with_items: "{{ host_vms }}"
  loop_control:
    loop_var: vm

- name: Dump VM XML
  command: /usr/bin/virsh dumpxml {{ vm.value.spec.name }}
  register: dom_xml
  with_dict: "{{ vm_inventory }}"
  loop_control:
    loop_var: vm
  when:
    - vm.value.spec.name in registered_vms.list_vms

- set_fact:
    "dom_dict_{{ item.vm.value.key }}": "{{ item.stdout | ansible.utils.from_xml }}"
  with_items:
    - "{{ dom_xml.results }}"
  when:
    - item.stdout is defined

- set_fact:
    create_vms: "{{ create_vms + [item] }}"
  with_items: "{{ host_vms }}"
  when:
    - item.name not in registered_vms.list_vms
    - item.state == "running"

- debug:
    msg: "VMs to be created: {{ create_vms }}"

# Get VM interface MAC
- include_tasks: get-vm-macs.yml
  with_dict: "{{ vm_inventory }}"
  loop_control:
    loop_var: vm

# Get IPs from admin NAT interface
- include_tasks: get-admin-ips.yml
  with_items: "{{ host_vms }}"
  when:
    - item.local_ssh_access | default(false) | bool
    - item.name in running_vms.list_vms

- debug:
    msg: "VMs: {{ vm_inventory }}"

- add_host: hostname={{ vm.name }}
    ansible_host={{ vm_inventory[vm.name].address | default('vm-' + vm.name) }}
    dns_host={{ 'vm-' + vm.name }}
    admin_ip={{ vm_inventory[vm.name].address | default('') }}
    groups={{ (['vms'] + (vm.inventory_groups | default([]))) | join(',') }}
    mac={{ vm_inventory[vm.name].mac[vm_network_bridge_name] }}
    local_ssh_access={{ vm.local_ssh_access | default(false) }}
    eip={{ vm_inventory[vm.name].spec.eip | default() }}
  with_items:
    - "{{ host_vms }}"
  loop_control:
    loop_var: vm
  when: vm.state == "running"

- debug:
    msg: "{{ groups }}"
