- name: List VMs
  virt:
    command: list_vms
  register: registered_vms

- name: List running VMs
  virt:
    command: list_vms
    state: running
  register: running_vms

- name: Initialize VM inventory
  set_fact:
    vm_inventory: {}

- name: Load VM inventory
  set_fact:
    vm_inventory: "{{ vm_inventory | combine({vm.name: { 'spec': vm, 'key': (vm.name | replace('-', '_')), 'vmfs': [] } }) }}"
  with_items: "{{ vms }}"
  loop_control:
    loop_var: vm
  when:
    - vm.host == inventory_hostname

- name: Inventory VM elastic IP
  set_fact:
    vm_inventory: "{{ vm_inventory | combine({ eip.value.vm: { 'eip': eip.key } }, recursive=True) }}"
  with_dict: "{{ eips }}"
  loop_control:
    loop_var: eip
  when: vm_inventory[eip.value.vm] is defined

- name: Inventory VM vmfs
  set_fact:
    vm_inventory: "{{ vm_inventory | combine({ vmfs.value.vm: { 'vmfs': [vmfs.key] + vm_inventory[vmfs.value.vm].vmfs } }, recursive=True) }}"
  with_dict: "{{ vmfs_shares }}"
  loop_control:
    loop_var: vmfs
  when:
    - vmfs.value.vm is defined
    - vm_inventory[vmfs.value.vm] is defined

- name: Inventory multi VM vmfs
  set_fact:
    vm_inventory: "{{ vm_inventory | combine({ item.1: { 'vmfs': [item.0.key] + vm_inventory[item.1].vmfs } }, recursive=True) }}"
  loop: "{{ vmfs_shares | dict2items | subelements('value.vms', skip_missing=True) }}"
  when:
    - item.0.value.vms is defined
    - vm_inventory[item.1] is defined

- name: Dump VM XML
  command: /usr/bin/virsh dumpxml {{ vm.value.spec.name }}
  register: dom_xml
  with_dict: "{{ vm_inventory }}"
  loop_control:
    loop_var: vm
  when:
    - vm.value.spec.name in registered_vms.list_vms

- set_fact:
    "dom_dict_{{ item.vm.value.key }}": "{{ item.stdout | ansible.utils.from_xml }}"
  with_items:
    - "{{ dom_xml.results }}"
  when:
    - item.stdout is defined

- set_fact:
    create_vms: "{{ create_vms + [vm.value.spec] }}"
  with_dict: "{{ vm_inventory }}"
  loop_control:
    loop_var: vm
  when:
    - vm.key not in registered_vms.list_vms
    - vm.value.spec.state in ['running', 'created']

- debug:
    msg: "VMs to be created: {{ create_vms }}"

# Get VM interface MAC
- include_tasks: get-vm-macs.yml
  with_dict: "{{ vm_inventory }}"
  loop_control:
    loop_var: vm

# Get IPs from admin NAT interface
- include_tasks: get-admin-ips.yml
  loop: "{{ vm_inventory | dict2items | subelements('value.vm_network_connections', skip_missing=True) }}"
  when:
    - item.0.key in running_vms.list_vms
    - item.1.vnet_name == vm_admin_network_name

- debug:
    msg: "VMs: {{ vm_inventory }}"

- add_host: hostname={{ vm.key }}
    ansible_host={{ vm.value.address | default('vm-' + vm.key) }}
    dns_host={{ 'vm-' + vm.key }}
    admin_ip={{ vm.value.address | default('') }}
    groups={{ (['vms'] + (['running_vms'] + (vm.value.spec.inventory_groups | default([])) if vm.value.spec.state == 'running' else [])) | join(',') }}
    vm_network_connections={{ vm.value.vm_network_connections }}
    static_ip={{ vm.value.spec.static_ip if vm.value.spec.static_ip is defined else omit }}
    eip={{ vm.value.eip if vm.value.eip is defined else omit }}
    eip_address={{ prefix_24 + '.' + vm.value.eip|string if vm.value.eip is defined else omit }}
    vmfs={{ vm.value.vmfs if vm.value.vmfs is defined else [] }}
  with_dict:
    - "{{ vm_inventory }}"
  loop_control:
    loop_var: vm

- debug:
    msg: "{{ groups }}"
