# create LV
- name: vm lvm volume
  lvol:
    lv: "vm-{{ item.name }}"
    vg: "{{ vm_volume_group }}"
    size: "{{ item.disk }}G"
  with_items: "{{ create_vms }}"

# copy image
#- copy:
#    src: "{{ vm_images }}/{{ vm_image[item.image] }}"
#    dest: /mnt/data0/{{ vm_image[item.image] }}
#  with_items: "{{ create_vms }}"

- name: Write image to lv
  shell: xz -dc {{ vm_images }}/{{ vm_image[item.image] }} > /dev/{{ vm_volume_group }}/vm-{{ item.name }}
  with_items: "{{ create_vms }}"

- file:
    path: "{{ vm_data_path }}/vmhost/{{ item.name }}"
    state: directory
  with_items: "{{ create_vms }}"

- template:
    src: "{{ item.1 }}.j2"
    dest: "{{ vm_data_path }}/vmhost/{{ item.0.name }}/{{ item.1 }}"
  with_nested:
    - "{{ create_vms }}"
    - ['meta-data', 'user-data']

- name: Generate cloud init iso
  shell: /usr/bin/genisoimage -output /var/lib/libvirt/images/{{ item.name }}_cloud-init.iso -volid cidata -joliet -rock user-data meta-data
  args:
    chdir: "{{ vm_data_path }}/vmhost/{{ item.name }}"
  with_items:
    - "{{ create_vms }}"

- file:
    path: "{{ vm_data_path }}/vmhost/{{ item.0.name }}/{{ item.1 }}"
    state: absent
  with_nested:
    - "{{ create_vms }}"
    - ['meta-data', 'user-data']

- include_tasks: update-vm-definition.yml
  with_items:
    - "{{ vms }}"
  loop_control:
    loop_var: vm
  when:
    - vm.host == inventory_hostname
    - vm.state in ["running"]

# VM has to exist in registered_vms to set state or be created
- name: VMs state
  virt:
    name: "{{ vm.name }}"
    state: "{{ vm.state }}"
  with_items: "{{ vms }}"
  loop_control:
    loop_var: vm
  when:
    - vm.host == inventory_hostname
    - (vm.name in registered_vms.list_vms) or (vm.name in create_vms | map(attribute='name'))

- name: Load any just created VMs
  command: /usr/bin/virsh dumpxml {{ item.name }}
  register: dom_xml
  with_items:
    - "{{ updated_vms }}"

- set_fact:
    "dom_dict_{{ item.item.name }}": "{{ item.stdout | ansible.utils.from_xml }}"
  with_items:
    - "{{ dom_xml.results }}"

- name: Undefine VMs for deletion
  virt:
    command: undefine
    name: "{{ vm.name }}"
  with_items: "{{ vms }}"
  loop_control:
    loop_var: vm
  when:
    - vm.host == inventory_hostname
    - vm.name in registered_vms.list_vms
    - vm.state in ["destroyed", "shutdown"]
    - vm.delete_on_termination | default(false) | bool
  register: undefined

- name: Deactive undefined VMs LV
  lvol:
    lv: "vm-{{ item.vm.name }}"
    vg: "{{ vm_volume_group }}"
    active: false
  with_items: "{{ undefined.results }}"
  when: item.undefine is defined

- name: Remove undefined VMs LV
  lvol:
    lv: "vm-{{ item.vm.name }}"
    vg: "{{ vm_volume_group }}"
    state: absent
    force: true
  with_items: "{{ undefined.results }}"
  when: item.undefine is defined
